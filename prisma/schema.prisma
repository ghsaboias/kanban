// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  clerkId   String?  @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  assignedCards Card[] @relation("CardAssignee")
  createdCards  Card[] @relation("CardCreator")
  activities    Activity[]

  @@map("users")
}

model Board {
  id          String   @id @default(cuid())
  title       String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  columns Column[]

  @@map("boards")
}

model Column {
  id       String @id @default(cuid())
  title    String
  position Int
  boardId  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  board Board @relation(fields: [boardId], references: [id], onDelete: Cascade)
  cards Card[]

  @@map("columns")
}

model Card {
  id          String    @id @default(cuid())
  title       String
  description String?
  priority    String    @default("MEDIUM")
  position    Int
  columnId    String
  assigneeId  String?
  createdById String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  column    Column @relation(fields: [columnId], references: [id], onDelete: Cascade)
  assignee  User?  @relation("CardAssignee", fields: [assigneeId], references: [id])
  createdBy User   @relation("CardCreator", fields: [createdById], references: [id])

  @@map("cards")
}

model Activity {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Entity identification
  entityType String
  entityId   String
  action     String

  // Denormalized for performance
  boardId  String
  columnId String?

  // Actor (nullable for system activities)
  userId String?
  user   User?  @relation(fields: [userId], references: [id], onDelete: SetNull)

  // Structured event details
  meta Json

  // Indexes for efficient queries
  @@index([entityType, entityId, createdAt(sort: Desc)])
  @@index([boardId, createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
  @@map("activities")
}
